
main course2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001700  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080018c8  080018c8  000118c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d8  080018d8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080018d8  080018d8  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018d8  080018d8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d8  080018d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080018e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200000c8  080019a8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080019a8  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040cc  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000de5  00000000  00000000  000241c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00025220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc58  00000000  00000000  000253d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004524  00000000  00000000  00042030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fae2  00000000  00000000  00046554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000768  00000000  00000000  000e6088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000c8 	.word	0x200000c8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080018b0 	.word	0x080018b0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000cc 	.word	0x200000cc
 8000204:	080018b0 	.word	0x080018b0

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <DMA2_Stream0_IRQHandler>:
void set_shifts(void);
void protect_software(void);
void integral_protect(void);

void DMA2_Stream0_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    // Сброс флага прерывания DMA2_Stream0 по окончанию передачи данных.
    DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <DMA2_Stream0_IRQHandler+0x11c>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	4a44      	ldr	r2, [pc, #272]	; (8000990 <DMA2_Stream0_IRQHandler+0x11c>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6093      	str	r3, [r2, #8]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop

    // Ожидание выполнения всех инструкций в конвейере (pipeline).
    __ISB();

    // Пересчёт значений из ADC_Buffer в физические величины.
    shift_and_scale();
 800088c:	f000 f894 	bl	80009b8 <shift_and_scale>

    // Программные защиты.
    protect_software();
 8000890:	f000 f94e 	bl	8000b30 <protect_software>

    // Автоопределение смещений.
    set_shifts();
 8000894:	f000 f90e 	bl	8000ab4 <set_shifts>

    // 0.4 - номинальный коэфф. заполнения.
    // 0.04 - 10% от номинального коэфф. заполнения.
    // 1.65 - макс. амплитуда переменной составляющей инжектируемого сигнала в [В].
    Boost_Control.duty = 0.6f + Boost_Measure.data.inj * (0.04f/1.65f);
 8000898:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 800089a:	edd3 7a01 	vldr	s15, [r3, #4]
 800089e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000998 <DMA2_Stream0_IRQHandler+0x124>
 80008a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800099c <DMA2_Stream0_IRQHandler+0x128>
 80008aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <DMA2_Stream0_IRQHandler+0x12c>)
 80008b0:	edc3 7a00 	vstr	s15, [r3]

    // Регистр сравнения: ARR * (коэфф. заполнения).
    TIM8->CCR1 = TIM8->ARR * LIMIT(Boost_Control.duty, Boost_Protect.sat.duty_min, Boost_Protect.sat.duty_max);
 80008b4:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <DMA2_Stream0_IRQHandler+0x130>)
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c0:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <DMA2_Stream0_IRQHandler+0x12c>)
 80008c2:	edd3 6a00 	vldr	s13, [r3]
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <DMA2_Stream0_IRQHandler+0x134>)
 80008c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80008cc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80008d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d4:	d503      	bpl.n	80008de <DMA2_Stream0_IRQHandler+0x6a>
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <DMA2_Stream0_IRQHandler+0x134>)
 80008d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80008dc:	e011      	b.n	8000902 <DMA2_Stream0_IRQHandler+0x8e>
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <DMA2_Stream0_IRQHandler+0x12c>)
 80008e0:	edd3 6a00 	vldr	s13, [r3]
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <DMA2_Stream0_IRQHandler+0x134>)
 80008e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80008ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f2:	dd03      	ble.n	80008fc <DMA2_Stream0_IRQHandler+0x88>
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <DMA2_Stream0_IRQHandler+0x134>)
 80008f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80008fa:	e002      	b.n	8000902 <DMA2_Stream0_IRQHandler+0x8e>
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <DMA2_Stream0_IRQHandler+0x12c>)
 80008fe:	edd3 7a00 	vldr	s15, [r3]
 8000902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <DMA2_Stream0_IRQHandler+0x130>)
 8000908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090c:	ee17 2a90 	vmov	r2, s15
 8000910:	635a      	str	r2, [r3, #52]	; 0x34

    // Выводим переменную на ЦАП1.
    Boost_Measure.dac[0].data = PID_Controller(&PID_CONTROLLER, REF_CONTROLLER);
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <DMA2_Stream0_IRQHandler+0x138>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	eeb0 0a67 	vmov.f32	s0, s15
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <DMA2_Stream0_IRQHandler+0x13c>)
 800091e:	f000 fa3a 	bl	8000d96 <PID_Controller>
 8000922:	eef0 7a40 	vmov.f32	s15, s0
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 8000928:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

    // Выводим переменную на ЦАП2.
    Boost_Measure.dac[1].data = 0;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	671a      	str	r2, [r3, #112]	; 0x70

    // Пересчитываем внутренние переменные в значения регистров ЦАП1 и ЦАП2.
    unsigned int dac1 = Boost_Measure.dac[0].scale * Boost_Measure.dac[0].data + Boost_Measure.dac[0].shift;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 8000936:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 800093c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 8000946:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800094a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000952:	ee17 3a90 	vmov	r3, s15
 8000956:	607b      	str	r3, [r7, #4]
    unsigned int dac2 = Boost_Measure.dac[1].scale * Boost_Measure.dac[1].data + Boost_Measure.dac[1].shift;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 800095a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 8000960:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <DMA2_Stream0_IRQHandler+0x120>)
 800096a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800096e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000976:	ee17 3a90 	vmov	r3, s15
 800097a:	603b      	str	r3, [r7, #0]

    // Запись чисел в ЦАП1 и ЦАП2.
    DAC->DHR12RD = dac1 | (dac2 << 16);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	041a      	lsls	r2, r3, #16
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <DMA2_Stream0_IRQHandler+0x140>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4313      	orrs	r3, r2
 8000986:	620b      	str	r3, [r1, #32]
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40026400 	.word	0x40026400
 8000994:	20000000 	.word	0x20000000
 8000998:	3cc6980c 	.word	0x3cc6980c
 800099c:	3f19999a 	.word	0x3f19999a
 80009a0:	200000e4 	.word	0x200000e4
 80009a4:	40010400 	.word	0x40010400
 80009a8:	2000007c 	.word	0x2000007c
 80009ac:	200000e8 	.word	0x200000e8
 80009b0:	200000a0 	.word	0x200000a0
 80009b4:	40007400 	.word	0x40007400

080009b8 <shift_and_scale>:
/**
 * \brief       Функция пересчёта значений физических величин.
 *
 */
void shift_and_scale(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
    extern volatile unsigned int ADC_Buffer[];

    Boost_Measure.data.inj = Boost_Measure.scale.inj * ADC_Buffer[0] + Boost_Measure.shift.inj;
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <shift_and_scale+0xf4>)
 80009be:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <shift_and_scale+0xf8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	ee07 3a90 	vmov	s15, r3
 80009ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <shift_and_scale+0xf4>)
 80009d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80009d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <shift_and_scale+0xf4>)
 80009de:	edc3 7a01 	vstr	s15, [r3, #4]
    Boost_Measure.data.u2 = Boost_Measure.scale.u2 * ADC_Buffer[1] + Boost_Measure.shift.u2;
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <shift_and_scale+0xf4>)
 80009e4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <shift_and_scale+0xf8>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <shift_and_scale+0xf4>)
 80009fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80009fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <shift_and_scale+0xf4>)
 8000a04:	edc3 7a02 	vstr	s15, [r3, #8]
    Boost_Measure.data.iL = Boost_Measure.scale.iL * ADC_Buffer[2] + Boost_Measure.shift.iL;
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <shift_and_scale+0xf4>)
 8000a0a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <shift_and_scale+0xf8>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <shift_and_scale+0xf4>)
 8000a20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <shift_and_scale+0xf4>)
 8000a2a:	edc3 7a03 	vstr	s15, [r3, #12]
    Boost_Measure.data.temperature = Boost_Measure.scale.temperature * ADC_Buffer[3] + Boost_Measure.shift.temperature;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <shift_and_scale+0xf4>)
 8000a30:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <shift_and_scale+0xf8>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <shift_and_scale+0xf4>)
 8000a46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <shift_and_scale+0xf4>)
 8000a50:	edc3 7a04 	vstr	s15, [r3, #16]
    Boost_Measure.data.u1 = Boost_Measure.scale.u1 * ADC_Buffer[4] + Boost_Measure.shift.u1;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <shift_and_scale+0xf4>)
 8000a56:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <shift_and_scale+0xf8>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <shift_and_scale+0xf4>)
 8000a6c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <shift_and_scale+0xf4>)
 8000a76:	edc3 7a05 	vstr	s15, [r3, #20]
    Boost_Measure.data.in = Boost_Measure.scale.in * ADC_Buffer[5] + Boost_Measure.shift.in;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <shift_and_scale+0xf4>)
 8000a7c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <shift_and_scale+0xf8>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <shift_and_scale+0xf4>)
 8000a92:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <shift_and_scale+0xf4>)
 8000a9c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200000ec 	.word	0x200000ec

08000ab4 <set_shifts>:
/**
 * \brief       Функция автоопределения смещений для АЦП.
 *
 */
void set_shifts(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
    if (Boost_Measure.count == 0)
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <set_shifts+0x74>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d02e      	beq.n	8000b1e <set_shifts+0x6a>
        return;

    // Обнуление текущего смещения и суммы при старте алгоритма автоопределения смещения.
    if (Boost_Measure.count == SET_SHIFTS_MAX_COUNT)
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <set_shifts+0x74>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d107      	bne.n	8000adc <set_shifts+0x28>
        Boost_Measure.shift.inj = Boost_Measure.sum.inj = 0;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <set_shifts+0x74>)
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <set_shifts+0x74>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <set_shifts+0x74>)
 8000ada:	61d3      	str	r3, [r2, #28]

    // Накапливаем сумму.
    Boost_Measure.sum.inj += Boost_Measure.data.inj * (1.f / SET_SHIFTS_MAX_COUNT);
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <set_shifts+0x74>)
 8000ade:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <set_shifts+0x74>)
 8000ae4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ae8:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000b2c <set_shifts+0x78>
 8000aec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <set_shifts+0x74>)
 8000af6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

    // Декремент счётчика и проверка окончания автоопределения смещений.
    if (--Boost_Measure.count == 0)
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <set_shifts+0x74>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <set_shifts+0x74>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <set_shifts+0x74>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d109      	bne.n	8000b20 <set_shifts+0x6c>
        Boost_Measure.shift.inj = -Boost_Measure.sum.inj;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <set_shifts+0x74>)
 8000b0e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b12:	eef1 7a67 	vneg.f32	s15, s15
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <set_shifts+0x74>)
 8000b18:	edc3 7a07 	vstr	s15, [r3, #28]
 8000b1c:	e000      	b.n	8000b20 <set_shifts+0x6c>
        return;
 8000b1e:	bf00      	nop
}
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	37a7c5ac 	.word	0x37a7c5ac

08000b30 <protect_software>:
/**
 * \brief       Функция программных защит.
 *
 */
void protect_software(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    // Защита по максимальному току реактора.
    if (Boost_Measure.data.iL > Boost_Protect.iL_max)
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <protect_software+0xa4>)
 8000b36:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <protect_software+0xa8>)
 8000b3c:	edd3 7a00 	vldr	s15, [r3]
 8000b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	dd07      	ble.n	8000b5a <protect_software+0x2a>
    {
        timer_PWM_Off();
 8000b4a:	f000 fe53 	bl	80017f4 <timer_PWM_Off>
        GPIOD->ODR |= 1 << 2;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <protect_software+0xac>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <protect_software+0xac>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6153      	str	r3, [r2, #20]
    }

    // Защита по максимальному выходному току.
    if (Boost_Measure.data.in > Boost_Protect.in_max)
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <protect_software+0xa4>)
 8000b5c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <protect_software+0xa8>)
 8000b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6e:	dd07      	ble.n	8000b80 <protect_software+0x50>
    {
        timer_PWM_Off();
 8000b70:	f000 fe40 	bl	80017f4 <timer_PWM_Off>
        GPIOD->ODR |= 1 << 3;
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <protect_software+0xac>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <protect_software+0xac>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6153      	str	r3, [r2, #20]
    }

    // Защита по максимальному входному напряжению.
    if (Boost_Measure.data.u1 > Boost_Protect.u1_max)
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <protect_software+0xa4>)
 8000b82:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <protect_software+0xa8>)
 8000b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	dd07      	ble.n	8000ba6 <protect_software+0x76>
    {
        timer_PWM_Off();
 8000b96:	f000 fe2d 	bl	80017f4 <timer_PWM_Off>
        GPIOD->ODR |= 1 << 4;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <protect_software+0xac>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <protect_software+0xac>)
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	6153      	str	r3, [r2, #20]
    }

    // Защита по максимальному выходному напряжению.
    if (Boost_Measure.data.u2 > Boost_Protect.u2_max)
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <protect_software+0xa4>)
 8000ba8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <protect_software+0xa8>)
 8000bae:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bba:	dd07      	ble.n	8000bcc <protect_software+0x9c>
    {
        timer_PWM_Off();
 8000bbc:	f000 fe1a 	bl	80017f4 <timer_PWM_Off>
        GPIOD->ODR |= 1 << 5;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <protect_software+0xac>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <protect_software+0xac>)
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	6153      	str	r3, [r2, #20]
    }

    // Интегрально-токовая защита.
    integral_protect();
 8000bcc:	f000 f808 	bl	8000be0 <integral_protect>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	2000007c 	.word	0x2000007c
 8000bdc:	40020c00 	.word	0x40020c00

08000be0 <integral_protect>:
/**
 * \brief       Функция интегрально-токовой защиты по току реактора (входному току).
 *
 */
void integral_protect(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
    // Разница между током реактора и его номинальным значением.
    float x = Boost_Measure.data.iL - Boost_Protect.iL_n;
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <integral_protect+0xb0>)
 8000be8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <integral_protect+0xb4>)
 8000bee:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf6:	edc7 7a01 	vstr	s15, [r7, #4]

    // Расчёт выхода интегратора (суммы).
    Boost_Protect.iL_int_sum = Boost_Protect.iL_int_sum + x * TS;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <integral_protect+0xb4>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd90 	bl	8000724 <__aeabi_f2d>
 8000c04:	4604      	mov	r4, r0
 8000c06:	460d      	mov	r5, r1
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fd8b 	bl	8000724 <__aeabi_f2d>
 8000c0e:	a31e      	add	r3, pc, #120	; (adr r3, 8000c88 <integral_protect+0xa8>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff faf8 	bl	8000208 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	f7ff fc22 	bl	8000468 <__adddf3>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4610      	mov	r0, r2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f7ff fdd2 	bl	80007d4 <__aeabi_d2f>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <integral_protect+0xb4>)
 8000c34:	6113      	str	r3, [r2, #16]

    // Обнуляем интегратор (сумму) в нормальном режиме работы.
    if (Boost_Protect.iL_int_sum < 0)
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <integral_protect+0xb4>)
 8000c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	d503      	bpl.n	8000c4e <integral_protect+0x6e>
        Boost_Protect.iL_int_sum = 0;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <integral_protect+0xb4>)
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]

    // Проверяем условие срабатывания защиты.
    if (Boost_Protect.iL_int_sum > Boost_Protect.iL_int_max)
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <integral_protect+0xb4>)
 8000c50:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <integral_protect+0xb4>)
 8000c56:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c62:	dc00      	bgt.n	8000c66 <integral_protect+0x86>
    {
        Boost_Protect.iL_int_sum = 0;
        timer_PWM_Off();
        GPIOD->ODR |= 1 << 1;
    }
}
 8000c64:	e00b      	b.n	8000c7e <integral_protect+0x9e>
        Boost_Protect.iL_int_sum = 0;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <integral_protect+0xb4>)
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
        timer_PWM_Off();
 8000c6e:	f000 fdc1 	bl	80017f4 <timer_PWM_Off>
        GPIOD->ODR |= 1 << 1;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <integral_protect+0xb8>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <integral_protect+0xb8>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6153      	str	r3, [r2, #20]
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bdb0      	pop	{r4, r5, r7, pc}
 8000c86:	bf00      	nop
 8000c88:	88e368f1 	.word	0x88e368f1
 8000c8c:	3ee4f8b5 	.word	0x3ee4f8b5
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000007c 	.word	0x2000007c
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <Trapezoidal_Integrator>:
 *
 * \return      y: сумму интегратора (выход).
 *
 */
float Trapezoidal_Integrator(Integrator_Struct * integrator, float x)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	ed87 0a00 	vstr	s0, [r7]
    // y[n]=s[n-1]+x[n]*k.
    float out = LIMIT(integrator->sum+x*integrator->k, integrator->sat.min, integrator->sat.max);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	edd3 6a00 	vldr	s13, [r3]
 8000cb4:	edd7 7a00 	vldr	s15, [r7]
 8000cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cce:	d503      	bpl.n	8000cd8 <Trapezoidal_Integrator+0x3c>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cd6:	e023      	b.n	8000d20 <Trapezoidal_Integrator+0x84>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	edd3 6a00 	vldr	s13, [r3]
 8000ce4:	edd7 7a00 	vldr	s15, [r7]
 8000ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	dd03      	ble.n	8000d08 <Trapezoidal_Integrator+0x6c>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d06:	e00b      	b.n	8000d20 <Trapezoidal_Integrator+0x84>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edd3 6a00 	vldr	s13, [r3]
 8000d14:	edd7 7a00 	vldr	s15, [r7]
 8000d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d20:	edc7 7a03 	vstr	s15, [r7, #12]
	//s[n]=y[n]+x[n]*k.
    integrator->sum = out+ x*integrator->k ;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	ed93 7a00 	vldr	s14, [r3]
 8000d2a:	edd7 7a00 	vldr	s15, [r7]
 8000d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	edc3 7a01 	vstr	s15, [r3, #4]

    // Возвращаем значение суммы.
    return out;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	ee07 3a90 	vmov	s15, r3
}
 8000d46:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <BackwardEuler_Diff>:


float BackwardEuler_Diff(Diff_Struct*diff, float x)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	ed87 0a00 	vstr	s0, [r7]
	//y[n] = ()
	float out = (x - diff->xz)*diff->k;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d66:	ed97 7a00 	vldr	s14, [r7]
 8000d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	edd3 7a00 	vldr	s15, [r3]
 8000d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d78:	edc7 7a03 	vstr	s15, [r7, #12]

	// Сохраняем текущее значение х для следующего расчета
	diff->xz=x;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	605a      	str	r2, [r3, #4]

	return out;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	ee07 3a90 	vmov	s15, r3

}
 8000d88:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PID_Controller>:
 *
 * \return      y: выход задатчика.
 *
 */
float PID_Controller(PID_Controller_Struct * pid, float x)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	ed87 0a00 	vstr	s0, [r7]
    // расчет пропорциональной части
    float out_p = x*pid->kp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	ed97 7a00 	vldr	s14, [r7]
 8000dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db0:	edc7 7a05 	vstr	s15, [r7, #20]

    // расчет пропорциональной части
    float out_i = Trapezoidal_Integrator(&pid->integrator, x);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3304      	adds	r3, #4
 8000db8:	ed97 0a00 	vldr	s0, [r7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff6d 	bl	8000c9c <Trapezoidal_Integrator>
 8000dc2:	ed87 0a04 	vstr	s0, [r7, #16]

    // расчет пропорциональной части
    float out_d = BackwardEuler_Diff(&pid->diff, x);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3314      	adds	r3, #20
 8000dca:	ed97 0a00 	vldr	s0, [r7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffc0 	bl	8000d54 <BackwardEuler_Diff>
 8000dd4:	ed87 0a03 	vstr	s0, [r7, #12]


    return LIMIT(out_p+out_i+out_d, pid->sat.min, pid->sat.max);
 8000dd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	edd3 7a07 	vldr	s15, [r3, #28]
 8000df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfa:	d503      	bpl.n	8000e04 <PID_Controller+0x6e>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e02:	e01f      	b.n	8000e44 <PID_Controller+0xae>
 8000e04:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	dd03      	ble.n	8000e30 <PID_Controller+0x9a>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e2e:	e009      	b.n	8000e44 <PID_Controller+0xae>
 8000e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e40:	ee77 7a27 	vadd.f32	s15, s14, s15

    }
 8000e44:	eeb0 0a67 	vmov.f32	s0, s15
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <main>:
#include "control.h"

volatile float TEMPERATURE;

int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
    // Глобальное отключение прерываний.
    __disable_irq();

    init_INTERRUPT();
 8000e58:	f000 fb7d 	bl	8001556 <init_INTERRUPT>
    init_RCC();
 8000e5c:	f000 fbe4 	bl	8001628 <init_RCC>
    init_GPIO();
 8000e60:	f000 f9ea 	bl	8001238 <init_GPIO>
    init_DMA();
 8000e64:	f000 f99c 	bl	80011a0 <init_DMA>
    init_ADC();
 8000e68:	f000 f8be 	bl	8000fe8 <init_ADC>
    init_TIMER8();
 8000e6c:	f000 fc70 	bl	8001750 <init_TIMER8>
    init_DAC();
 8000e70:	f000 f97e 	bl	8001170 <init_DAC>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e74:	b662      	cpsie	i
}
 8000e76:	bf00      	nop
    {
        //for(int i = 0; i < 100000; i++);
        //GPIOD->ODR ^= 1 << 1;

        // Проверяем PB1 (SW1) на ноль.
        if (!(GPIOB->IDR & (1 << 1)))
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <main+0x64>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d103      	bne.n	8000e8c <main+0x3c>
            Boost_Measure.count = SET_SHIFTS_MAX_COUNT;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <main+0x68>)
 8000e86:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e8a:	601a      	str	r2, [r3, #0]

        // Проверяем PB2 (SW2) на ноль.
        if (!(GPIOB->IDR & (1 << 2)))
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <main+0x64>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1ef      	bne.n	8000e78 <main+0x28>
        {
        	extern float REF_CONTROLLER;
        	REF_CONTROLLER = 1.f;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <main+0x6c>)
 8000e9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e9e:	601a      	str	r2, [r3, #0]

            timer_PWM_On();
 8000ea0:	f000 fc98 	bl	80017d4 <timer_PWM_On>
            GPIOD->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5));
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <main+0x70>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <main+0x70>)
 8000eaa:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8000eae:	6153      	str	r3, [r2, #20]
        if (!(GPIOB->IDR & (1 << 1)))
 8000eb0:	e7e2      	b.n	8000e78 <main+0x28>
 8000eb2:	bf00      	nop
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	200000e8 	.word	0x200000e8
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	2302      	movs	r3, #2
 8000f00:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d011      	beq.n	8000f36 <SystemCoreClockUpdate+0x4e>
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d844      	bhi.n	8000fa2 <SystemCoreClockUpdate+0xba>
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <SystemCoreClockUpdate+0x3e>
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d004      	beq.n	8000f2e <SystemCoreClockUpdate+0x46>
 8000f24:	e03d      	b.n	8000fa2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <SystemCoreClockUpdate+0xf0>)
 8000f28:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <SystemCoreClockUpdate+0xf4>)
 8000f2a:	601a      	str	r2, [r3, #0]
      break;
 8000f2c:	e03d      	b.n	8000faa <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <SystemCoreClockUpdate+0xf0>)
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <SystemCoreClockUpdate+0xf8>)
 8000f32:	601a      	str	r2, [r3, #0]
      break;
 8000f34:	e039      	b.n	8000faa <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	0d9b      	lsrs	r3, r3, #22
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f4a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00c      	beq.n	8000f6c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f52:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <SystemCoreClockUpdate+0xf8>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000f5c:	6852      	ldr	r2, [r2, #4]
 8000f5e:	0992      	lsrs	r2, r2, #6
 8000f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e00b      	b.n	8000f84 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <SystemCoreClockUpdate+0xf4>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000f76:	6852      	ldr	r2, [r2, #4]
 8000f78:	0992      	lsrs	r2, r2, #6
 8000f7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <SystemCoreClockUpdate+0xf0>)
 8000f9e:	6013      	str	r3, [r2, #0]
      break;
 8000fa0:	e003      	b.n	8000faa <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <SystemCoreClockUpdate+0xf0>)
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <SystemCoreClockUpdate+0xf4>)
 8000fa6:	601a      	str	r2, [r3, #0]
      break;
 8000fa8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <SystemCoreClockUpdate+0xec>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <SystemCoreClockUpdate+0xfc>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <SystemCoreClockUpdate+0xf0>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <SystemCoreClockUpdate+0xf0>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	200000c4 	.word	0x200000c4
 8000fdc:	00f42400 	.word	0x00f42400
 8000fe0:	017d7840 	.word	0x017d7840
 8000fe4:	080018c8 	.word	0x080018c8

08000fe8 <init_ADC>:

#include "stm32f7xx.h"
#include "adc.h"

void init_ADC(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    // Вкл. тактирования модулей ADC1,2,3.
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000fec:	4b5b      	ldr	r3, [pc, #364]	; (800115c <init_ADC+0x174>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	4a5a      	ldr	r2, [pc, #360]	; (800115c <init_ADC+0x174>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000ff8:	4b58      	ldr	r3, [pc, #352]	; (800115c <init_ADC+0x174>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	4a57      	ldr	r2, [pc, #348]	; (800115c <init_ADC+0x174>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8001004:	4b55      	ldr	r3, [pc, #340]	; (800115c <init_ADC+0x174>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	4a54      	ldr	r2, [pc, #336]	; (800115c <init_ADC+0x174>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6453      	str	r3, [r2, #68]	; 0x44

    // Вкл. ADC1,2,3.
    ADC1->CR2 |= ADC_CR2_ADON;
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <init_ADC+0x178>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <init_ADC+0x178>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;
 800101c:	4b51      	ldr	r3, [pc, #324]	; (8001164 <init_ADC+0x17c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a50      	ldr	r2, [pc, #320]	; (8001164 <init_ADC+0x17c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6093      	str	r3, [r2, #8]
    ADC3->CR2 |= ADC_CR2_ADON;
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <init_ADC+0x180>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4a4e      	ldr	r2, [pc, #312]	; (8001168 <init_ADC+0x180>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6093      	str	r3, [r2, #8]

    // Выбираем каналы АЦП для первого преобразования.
    ADC1->SQR3 |= 3;    // Сигнал инжекции.
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <init_ADC+0x178>)
 8001036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <init_ADC+0x178>)
 800103a:	f043 0303 	orr.w	r3, r3, #3
 800103e:	6353      	str	r3, [r2, #52]	; 0x34
    ADC2->SQR3 |= 0;    // Выходное напряжение.
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <init_ADC+0x17c>)
 8001042:	4a48      	ldr	r2, [pc, #288]	; (8001164 <init_ADC+0x17c>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= 14;   // Ток реактора.
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <init_ADC+0x180>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104c:	4a46      	ldr	r2, [pc, #280]	; (8001168 <init_ADC+0x180>)
 800104e:	f043 030e 	orr.w	r3, r3, #14
 8001052:	6353      	str	r3, [r2, #52]	; 0x34

    // Выбираем каналы АЦП для второго преобразования.
    ADC1->SQR3 |= 18 << 5;  // Температура.
 8001054:	4b42      	ldr	r3, [pc, #264]	; (8001160 <init_ADC+0x178>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001058:	4a41      	ldr	r2, [pc, #260]	; (8001160 <init_ADC+0x178>)
 800105a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
 800105e:	6353      	str	r3, [r2, #52]	; 0x34
    ADC2->SQR3 |= 13 << 5;  // Входное напряжение.
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <init_ADC+0x17c>)
 8001062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001064:	4a3f      	ldr	r2, [pc, #252]	; (8001164 <init_ADC+0x17c>)
 8001066:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 800106a:	6353      	str	r3, [r2, #52]	; 0x34
    ADC3->SQR3 |= 12 << 5;  // Выходной ток.
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <init_ADC+0x180>)
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <init_ADC+0x180>)
 8001072:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8001076:	6353      	str	r3, [r2, #52]	; 0x34

    // Количество преобразований = 2.
    ADC1->SQR1 |= 1 << 20;
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <init_ADC+0x178>)
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	4a38      	ldr	r2, [pc, #224]	; (8001160 <init_ADC+0x178>)
 800107e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001082:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC2->SQR1 |= 1 << 20;
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <init_ADC+0x17c>)
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	4a36      	ldr	r2, [pc, #216]	; (8001164 <init_ADC+0x17c>)
 800108a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800108e:	62d3      	str	r3, [r2, #44]	; 0x2c
    ADC3->SQR1 |= 1 << 20;
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <init_ADC+0x180>)
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	4a34      	ldr	r2, [pc, #208]	; (8001168 <init_ADC+0x180>)
 8001096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800109a:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Вкл. режима сканирования.
    ADC1->CR1 |= ADC_CR1_SCAN;
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <init_ADC+0x178>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <init_ADC+0x178>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6053      	str	r3, [r2, #4]
    ADC2->CR1 |= ADC_CR1_SCAN;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <init_ADC+0x17c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <init_ADC+0x17c>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6053      	str	r3, [r2, #4]
    ADC3->CR1 |= ADC_CR1_SCAN;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <init_ADC+0x180>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <init_ADC+0x180>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6053      	str	r3, [r2, #4]

    // Устанавливаем период выборки равным 15 циклов.
    ADC1->SMPR1 |= ADC_SMPR1_SMP18_0;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <init_ADC+0x178>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <init_ADC+0x178>)
 80010c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ca:	60d3      	str	r3, [r2, #12]
    ADC1->SMPR2 |= ADC_SMPR2_SMP3_0;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <init_ADC+0x178>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	4a23      	ldr	r2, [pc, #140]	; (8001160 <init_ADC+0x178>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6113      	str	r3, [r2, #16]

    ADC2->SMPR2 |= ADC_SMPR2_SMP0_0;
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <init_ADC+0x17c>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <init_ADC+0x17c>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6113      	str	r3, [r2, #16]
    ADC2->SMPR1 |= ADC_SMPR1_SMP13_0;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <init_ADC+0x17c>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <init_ADC+0x17c>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ee:	60d3      	str	r3, [r2, #12]

    ADC3->SMPR1 |= ADC_SMPR1_SMP14_0;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <init_ADC+0x180>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <init_ADC+0x180>)
 80010f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fa:	60d3      	str	r3, [r2, #12]
    ADC3->SMPR1 |= ADC_SMPR1_SMP12_0;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <init_ADC+0x180>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <init_ADC+0x180>)
 8001102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001106:	60d3      	str	r3, [r2, #12]

    // Вкл. запуск АЦП от сигнала TIM8 TRGO.
    ADC1->CR2 |= ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <init_ADC+0x178>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <init_ADC+0x178>)
 800110e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001112:	6093      	str	r3, [r2, #8]

    // Запуск АЦП от TIM8 TRGO по нарастающему фронту.
    ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <init_ADC+0x178>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <init_ADC+0x178>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6093      	str	r3, [r2, #8]

    // Вкл. температурного датчика.
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <init_ADC+0x184>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <init_ADC+0x184>)
 8001126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800112a:	6053      	str	r3, [r2, #4]

    // Режим работы АЦП с DMA = 1.
    ADC->CCR |= ADC_CCR_DMA_0;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <init_ADC+0x184>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <init_ADC+0x184>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6053      	str	r3, [r2, #4]

    // Вкл. запуск запросов к DMA по окончанию преобразований.
    ADC->CCR |= ADC_CCR_DDS;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <init_ADC+0x184>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <init_ADC+0x184>)
 800113e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001142:	6053      	str	r3, [r2, #4]

    // Режим Triple ADC Mode.
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2 | ADC_CCR_MULTI_4;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <init_ADC+0x184>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a08      	ldr	r2, [pc, #32]	; (800116c <init_ADC+0x184>)
 800114a:	f043 0316 	orr.w	r3, r3, #22
 800114e:	6053      	str	r3, [r2, #4]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40012000 	.word	0x40012000
 8001164:	40012100 	.word	0x40012100
 8001168:	40012200 	.word	0x40012200
 800116c:	40012300 	.word	0x40012300

08001170 <init_DAC>:

#include "stm32f7xx.h"
#include "dac.h"

void init_DAC(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    // Вкл. тактирование ЦАП.
    RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <init_DAC+0x28>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <init_DAC+0x28>)
 800117a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40

    // Вкл. ЦАП1 и ЦАП2.
    DAC->CR |= DAC_CR_EN1 | DAC_CR_EN2;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <init_DAC+0x2c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <init_DAC+0x2c>)
 8001186:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007400 	.word	0x40007400

080011a0 <init_DMA>:
#include "dma.h"

volatile unsigned int ADC_Buffer[6];

void init_DMA(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
    // Вкл. тактирование на DMA2.
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <init_DMA+0x88>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <init_DMA+0x88>)
 80011aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30

    // Настраиваем адрес источника данных (АЦП).
    DMA2_Stream0->PAR = (unsigned int)&(ADC->CDR);
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <init_DMA+0x8c>)
 80011b2:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <init_DMA+0x90>)
 80011b4:	609a      	str	r2, [r3, #8]

    // Настраиваем адрес места назначения (массив).
    DMA2_Stream0->M0AR = (unsigned int)&ADC_Buffer[0];
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <init_DMA+0x8c>)
 80011b8:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <init_DMA+0x94>)
 80011ba:	60da      	str	r2, [r3, #12]

    // Количество пересылаемых данных.
    DMA2_Stream0->NDTR = 6;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <init_DMA+0x8c>)
 80011be:	2206      	movs	r2, #6
 80011c0:	605a      	str	r2, [r3, #4]

    // Выбираем канал 0.
    DMA2_Stream0->CR |= 0 << 25;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <init_DMA+0x8c>)
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <init_DMA+0x8c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6013      	str	r3, [r2, #0]

    // Установка приоритета при выборе потоков DMA для передачи
    // данных по шине данных = very high.
    DMA2_Stream0->CR |= DMA_SxCR_PL_0 | DMA_SxCR_PL_1;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <init_DMA+0x8c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <init_DMA+0x8c>)
 80011d0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80011d4:	6013      	str	r3, [r2, #0]

    // Размер данных в источнике (АЦП) = 32 бита.
    DMA2_Stream0->CR |= DMA_SxCR_PSIZE_1;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <init_DMA+0x8c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <init_DMA+0x8c>)
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e0:	6013      	str	r3, [r2, #0]

    // Размер данных в месте назначения (массив) = 32 бита.
    DMA2_Stream0->CR |= DMA_SxCR_MSIZE_1;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <init_DMA+0x8c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <init_DMA+0x8c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6013      	str	r3, [r2, #0]

    // Вкл. увеличение адрес в месте назначения (массив) при последовательной записи элементов.
    DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <init_DMA+0x8c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <init_DMA+0x8c>)
 80011f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f8:	6013      	str	r3, [r2, #0]

    // Вкл. режим цикличной (непрерывной) передачи.
    DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <init_DMA+0x8c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <init_DMA+0x8c>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

    // Вкл. прерывание по окончанию передачи.
    DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <init_DMA+0x8c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <init_DMA+0x8c>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6013      	str	r3, [r2, #0]

    // Вкл. DMA2 Stream0.
    DMA2_Stream0->CR |= DMA_SxCR_EN;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <init_DMA+0x8c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <init_DMA+0x8c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800
 800122c:	40026410 	.word	0x40026410
 8001230:	40012308 	.word	0x40012308
 8001234:	200000ec 	.word	0x200000ec

08001238 <init_GPIO>:
void init_GPIO_Output(GPIO_TypeDef * gpio, unsigned int pin);
void init_GPIO_AFunction(GPIO_TypeDef * gpio, unsigned int pin, unsigned int AF);
void init_GPIO_Analog(GPIO_TypeDef * gpio, unsigned int pin);

void init_GPIO(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <init_GPIO+0xe4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a36      	ldr	r2, [pc, #216]	; (800131c <init_GPIO+0xe4>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <init_GPIO+0xe4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a33      	ldr	r2, [pc, #204]	; (800131c <init_GPIO+0xe4>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <init_GPIO+0xe4>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <init_GPIO+0xe4>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <init_GPIO+0xe4>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a2d      	ldr	r2, [pc, #180]	; (800131c <init_GPIO+0xe4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <init_GPIO+0xe4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a2a      	ldr	r2, [pc, #168]	; (800131c <init_GPIO+0xe4>)
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <init_GPIO+0xe4>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <init_GPIO+0xe4>)
 800127e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001282:	6313      	str	r3, [r2, #48]	; 0x30

    // Светодиоды.
    init_GPIO_Output(GPIOD, 1);     // HL1.
 8001284:	2101      	movs	r1, #1
 8001286:	4826      	ldr	r0, [pc, #152]	; (8001320 <init_GPIO+0xe8>)
 8001288:	f000 f854 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOD, 2);     // HL2.
 800128c:	2102      	movs	r1, #2
 800128e:	4824      	ldr	r0, [pc, #144]	; (8001320 <init_GPIO+0xe8>)
 8001290:	f000 f850 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOD, 3);     // HL3.
 8001294:	2103      	movs	r1, #3
 8001296:	4822      	ldr	r0, [pc, #136]	; (8001320 <init_GPIO+0xe8>)
 8001298:	f000 f84c 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOD, 4);     // HL4.
 800129c:	2104      	movs	r1, #4
 800129e:	4820      	ldr	r0, [pc, #128]	; (8001320 <init_GPIO+0xe8>)
 80012a0:	f000 f848 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOD, 5);     // HL5.
 80012a4:	2105      	movs	r1, #5
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <init_GPIO+0xe8>)
 80012a8:	f000 f844 	bl	8001334 <init_GPIO_Output>

    // Тестовые выводы.
    init_GPIO_Output(GPIOD, 6);     // X5.
 80012ac:	2106      	movs	r1, #6
 80012ae:	481c      	ldr	r0, [pc, #112]	; (8001320 <init_GPIO+0xe8>)
 80012b0:	f000 f840 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOD, 7);     // X6.
 80012b4:	2107      	movs	r1, #7
 80012b6:	481a      	ldr	r0, [pc, #104]	; (8001320 <init_GPIO+0xe8>)
 80012b8:	f000 f83c 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOG, 9);     // X7.
 80012bc:	2109      	movs	r1, #9
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <init_GPIO+0xec>)
 80012c0:	f000 f838 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOG, 10);    // X8.
 80012c4:	210a      	movs	r1, #10
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <init_GPIO+0xec>)
 80012c8:	f000 f834 	bl	8001334 <init_GPIO_Output>
    init_GPIO_Output(GPIOG, 11);    // X9.
 80012cc:	210b      	movs	r1, #11
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <init_GPIO+0xec>)
 80012d0:	f000 f830 	bl	8001334 <init_GPIO_Output>

    // Выход TIM8 CH1.
    init_GPIO_AFunction(GPIOC, 6, 3);
 80012d4:	2203      	movs	r2, #3
 80012d6:	2106      	movs	r1, #6
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <init_GPIO+0xf0>)
 80012da:	f000 f840 	bl	800135e <init_GPIO_AFunction>

    init_GPIO_Analog(GPIOA, 0);     // Выходное напряжение.
 80012de:	2100      	movs	r1, #0
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <init_GPIO+0xf4>)
 80012e2:	f000 f875 	bl	80013d0 <init_GPIO_Analog>
    init_GPIO_Analog(GPIOC, 2);     // Выходной ток.
 80012e6:	2102      	movs	r1, #2
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <init_GPIO+0xf0>)
 80012ea:	f000 f871 	bl	80013d0 <init_GPIO_Analog>
    init_GPIO_Analog(GPIOC, 3);     // Входное напряжение.
 80012ee:	2103      	movs	r1, #3
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <init_GPIO+0xf0>)
 80012f2:	f000 f86d 	bl	80013d0 <init_GPIO_Analog>
    init_GPIO_Analog(GPIOF, 4);     // Ток дросселя (входной ток).
 80012f6:	2104      	movs	r1, #4
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <init_GPIO+0xf8>)
 80012fa:	f000 f869 	bl	80013d0 <init_GPIO_Analog>
    init_GPIO_Analog(GPIOA, 3);     // Сигнал инжекции (для частотных характеристик).
 80012fe:	2103      	movs	r1, #3
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <init_GPIO+0xf4>)
 8001302:	f000 f865 	bl	80013d0 <init_GPIO_Analog>

    init_GPIO_Analog(GPIOA, 4);     // ЦАП1.
 8001306:	2104      	movs	r1, #4
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <init_GPIO+0xf4>)
 800130a:	f000 f861 	bl	80013d0 <init_GPIO_Analog>
    init_GPIO_Analog(GPIOA, 5);     // ЦАП2.
 800130e:	2105      	movs	r1, #5
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <init_GPIO+0xf4>)
 8001312:	f000 f85d 	bl	80013d0 <init_GPIO_Analog>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021800 	.word	0x40021800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020000 	.word	0x40020000
 8001330:	40021400 	.word	0x40021400

08001334 <init_GPIO_Output>:

void init_GPIO_Output(GPIO_TypeDef * gpio, unsigned int pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
    gpio->MODER |= 1 << (2*pin);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <init_GPIO_AFunction>:

void init_GPIO_AFunction(GPIO_TypeDef * gpio, unsigned int pin, unsigned int AF)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
    if (pin < 8)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b07      	cmp	r3, #7
 800136e:	d80a      	bhi.n	8001386 <init_GPIO_AFunction+0x28>
        gpio->AFR[0] |= AF << (4*pin);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	431a      	orrs	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	e00a      	b.n	800139c <init_GPIO_AFunction+0x3e>
    else
        gpio->AFR[1] |= AF << (4*(pin - 8));
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b08      	subs	r3, #8
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

    gpio->MODER |= 2 << (2*pin);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	0052      	lsls	r2, r2, #1
 80013a4:	2102      	movs	r1, #2
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	601a      	str	r2, [r3, #0]
    gpio->OSPEEDR |= 3 << (2*pin);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	0052      	lsls	r2, r2, #1
 80013b8:	2103      	movs	r1, #3
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	431a      	orrs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	609a      	str	r2, [r3, #8]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <init_GPIO_Analog>:

void init_GPIO_Analog(GPIO_TypeDef * gpio, unsigned int pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
    gpio->MODER |= 3 << (2*pin);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	0052      	lsls	r2, r2, #1
 80013e2:	2103      	movs	r1, #3
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <__NVIC_SetPriorityGrouping+0x40>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	4313      	orrs	r3, r2
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x40>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	05fa0000 	.word	0x05fa0000

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <init_INTERRUPT>:

#include "stm32f7xx.h"
#include "interrupt.h"

void init_INTERRUPT(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
    // Выбор варианта группирования прерываний 3 (16 групп по 16 подприоритет).
    NVIC_SetPriorityGrouping(3);
 800155a:	2003      	movs	r0, #3
 800155c:	f7ff ff4e 	bl	80013fc <__NVIC_SetPriorityGrouping>

    // Включаем прерываний TIM8_UP_TIM13 в NVIC.
    //NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);

    // Установка приоритет прерывания DMA2_Stream0_IRQn: группа 2, подприоритет 1.
    NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 1));
 8001560:	f7ff ff70 	bl	8001444 <__NVIC_GetPriorityGrouping>
 8001564:	4603      	mov	r3, r0
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ffc0 	bl	80014f0 <NVIC_EncodePriority>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	2038      	movs	r0, #56	; 0x38
 8001576:	f7ff ff91 	bl	800149c <__NVIC_SetPriority>

    // Включаем прерываний DMA2_Stream0_IRQn в NVIC.
    NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800157a:	2038      	movs	r0, #56	; 0x38
 800157c:	f7ff ff70 	bl	8001460 <__NVIC_EnableIRQ>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
    // Сброс флага прерывания TIM8 по обновлению.
    TIM8->SR &= ~TIM_SR_UIF;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6113      	str	r3, [r2, #16]
  __ASM volatile ("isb 0xF":::"memory");
 8001594:	f3bf 8f6f 	isb	sy
}
 8001598:	bf00      	nop
    __ISB();

    //GPIOD->ODR ^= 1 << 6;
    //GPIOD->ODR ^= GPIO_ODR_OD6;
    //GPIOD->ODR = GPIOD->ODR ^ (1 << 6);
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40010400 	.word	0x40010400

080015a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015ac:	f3bf 8f4f 	dsb	sy
}
 80015b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b2:	f3bf 8f6f 	isb	sy
}
 80015b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <SCB_EnableICache+0x48>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015c6:	f3bf 8f6f 	isb	sy
}
 80015ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SCB_EnableICache+0x48>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <SCB_EnableICache+0x48>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015d8:	f3bf 8f4f 	dsb	sy
}
 80015dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015de:	f3bf 8f6f 	isb	sy
}
 80015e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80015f8:	f3bf 8f4f 	dsb	sy
}
 80015fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015fe:	f3bf 8f6f 	isb	sy
}
 8001602:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <SCB_InvalidateICache+0x30>)
 8001606:	2200      	movs	r2, #0
 8001608:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800160c:	f3bf 8f4f 	dsb	sy
}
 8001610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001612:	f3bf 8f6f 	isb	sy
}
 8001616:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <init_RCC>:
#include "stm32f7xx.h"

#include "rcc.h"

void init_RCC(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
    // Сброс периферии.
    RCC->AHB1RSTR = 0xFFFFFFFF;
 800162e:	4b45      	ldr	r3, [pc, #276]	; (8001744 <init_RCC+0x11c>)
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	611a      	str	r2, [r3, #16]
    RCC->AHB1RSTR = 0x00000000;
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <init_RCC+0x11c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]

    RCC->AHB2RSTR = 0xFFFFFFFF;
 800163c:	4b41      	ldr	r3, [pc, #260]	; (8001744 <init_RCC+0x11c>)
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	615a      	str	r2, [r3, #20]
    RCC->AHB2RSTR = 0x00000000;
 8001644:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <init_RCC+0x11c>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]

    RCC->APB1RSTR = 0xFFFFFFFF;
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <init_RCC+0x11c>)
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	621a      	str	r2, [r3, #32]
    RCC->APB1RSTR = 0x00000000;
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <init_RCC+0x11c>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]

    RCC->APB2RSTR = 0xFFFFFFFF;
 8001658:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <init_RCC+0x11c>)
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC->APB2RSTR = 0x00000000;
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <init_RCC+0x11c>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

    // Вкл. кэш инструкций.
    SCB_InvalidateICache();
 8001666:	f7ff ffc5 	bl	80015f4 <SCB_InvalidateICache>
    SCB_EnableICache();
 800166a:	f7ff ff9d 	bl	80015a8 <SCB_EnableICache>

    // Обновление переменной с частотой тактирования.
    SystemCoreClockUpdate();
 800166e:	f7ff fc3b 	bl	8000ee8 <SystemCoreClockUpdate>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <init_RCC+0x11c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a33      	ldr	r2, [pc, #204]	; (8001744 <init_RCC+0x11c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40

    // Включение внешнего тактового генератора.
    RCC->CR |= RCC_CR_HSEBYP;
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <init_RCC+0x11c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a30      	ldr	r2, [pc, #192]	; (8001744 <init_RCC+0x11c>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_HSEON;
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <init_RCC+0x11c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <init_RCC+0x11c>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSERDY));
 8001696:	bf00      	nop
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <init_RCC+0x11c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f9      	beq.n	8001698 <init_RCC+0x70>

    // Выключение PLL.
    RCC->CR &= ~RCC_CR_PLLON;
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <init_RCC+0x11c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <init_RCC+0x11c>)
 80016aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ae:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 80016b0:	bf00      	nop
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <init_RCC+0x11c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <init_RCC+0x8a>

    // Настройка предделителей для шин тактирования периферии.
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <init_RCC+0x11c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4a20      	ldr	r2, [pc, #128]	; (8001744 <init_RCC+0x11c>)
 80016c4:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 80016c8:	6093      	str	r3, [r2, #8]

    // Настройка предделителей PLL.
    uint32_t pllcfgr = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]

    pllcfgr |= RCC_PLLCFGR_PLLSRC_HSE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d4:	607b      	str	r3, [r7, #4]
    pllcfgr |= 25 << RCC_PLLCFGR_PLLM_Pos;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f043 0319 	orr.w	r3, r3, #25
 80016dc:	607b      	str	r3, [r7, #4]
    pllcfgr |= 432 << RCC_PLLCFGR_PLLN_Pos;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 80016e4:	607b      	str	r3, [r7, #4]
    pllcfgr |= 0 << RCC_PLLCFGR_PLLP_Pos;

    RCC->PLLCFGR = pllcfgr;
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <init_RCC+0x11c>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6053      	str	r3, [r2, #4]

    // Настраиваем latency на 7 для 216 МГц.
    FLASH->ACR |= (7 << FLASH_ACR_LATENCY_Pos);
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <init_RCC+0x120>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a15      	ldr	r2, [pc, #84]	; (8001748 <init_RCC+0x120>)
 80016f2:	f043 0307 	orr.w	r3, r3, #7
 80016f6:	6013      	str	r3, [r2, #0]

    // Включение PLL.
    RCC->CR |= RCC_CR_PLLON;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <init_RCC+0x11c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <init_RCC+0x11c>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8001704:	bf00      	nop
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <init_RCC+0x11c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f9      	beq.n	8001706 <init_RCC+0xde>

    // Включение режим Over-Drive.
    PWR->CR1 |= PWR_CR1_ODEN;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <init_RCC+0x124>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <init_RCC+0x124>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
    PWR->CR1 |= PWR_CR1_ODSWEN;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <init_RCC+0x124>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <init_RCC+0x124>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	6013      	str	r3, [r2, #0]

    // Выбор PLL как основного источника тактирования.
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <init_RCC+0x11c>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <init_RCC+0x11c>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6093      	str	r3, [r2, #8]

    SystemCoreClockUpdate();
 8001736:	f7ff fbd7 	bl	8000ee8 <SystemCoreClockUpdate>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40007000 	.word	0x40007000

08001750 <init_TIMER8>:

#include "stm32f7xx.h"
#include "timer.h"

void init_TIMER8(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    // Вкл. тактирование модуля TIM8.
    RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <init_TIMER8+0x7c>)
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <init_TIMER8+0x7c>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6453      	str	r3, [r2, #68]	; 0x44

    // Настраиваем:
    //      Предделитель: 1
    //      Макс. счёт: 1080 (100 кГц)
    TIM8->PSC = 0;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <init_TIMER8+0x80>)
 8001762:	2200      	movs	r2, #0
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
    TIM8->ARR = 216000000/100000/2;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <init_TIMER8+0x80>)
 8001768:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Симметричный счёт (режим 2).
    TIM8->CR1 |= TIM_CR1_CMS_1;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <init_TIMER8+0x80>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <init_TIMER8+0x80>)
 8001774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001778:	6013      	str	r3, [r2, #0]

    // Вкл. канал сравнения.
    TIM8->CCER |= TIM_CCER_CC1E;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <init_TIMER8+0x80>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <init_TIMER8+0x80>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]

    // Вкл. ШИМ.
    timer_PWM_On();
 8001786:	f000 f825 	bl	80017d4 <timer_PWM_On>

    // Вкл. буферизацию.
    TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <init_TIMER8+0x80>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <init_TIMER8+0x80>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6193      	str	r3, [r2, #24]

    // Вкл. физический канал выхода.
    TIM8->BDTR |= TIM_BDTR_MOE;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <init_TIMER8+0x80>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <init_TIMER8+0x80>)
 800179c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44

    // Включение прерывания по обновлению.
    TIM8->DIER |= TIM_DIER_UIE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <init_TIMER8+0x80>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <init_TIMER8+0x80>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	60d3      	str	r3, [r2, #12]

    // Вкл. генерацию TRGO по событию обновления (Update).
    TIM8->CR2 |= TIM_CR2_MMS_1;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <init_TIMER8+0x80>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <init_TIMER8+0x80>)
 80017b4:	f043 0320 	orr.w	r3, r3, #32
 80017b8:	6053      	str	r3, [r2, #4]

    // Вкл. счёт таймера.
    TIM8->CR1 |= TIM_CR1_CEN;
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <init_TIMER8+0x80>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <init_TIMER8+0x80>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40010400 	.word	0x40010400

080017d4 <timer_PWM_On>:
/**
 * \brief       Функция включения ШИМ таймера 8.
 *
 */
void timer_PWM_On(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
    // Режим ШИМ 1.
    TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <timer_PWM_On+0x1c>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <timer_PWM_On+0x1c>)
 80017de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e2:	6193      	str	r3, [r2, #24]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40010400 	.word	0x40010400

080017f4 <timer_PWM_Off>:
/**
 * \brief       Функция выключения ШИМ таймера 8.
 *
 */
void timer_PWM_Off(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
    // Режим принудительного логического 0.
    TIM8->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <timer_PWM_Off+0x1c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <timer_PWM_Off+0x1c>)
 80017fe:	f023 0320 	bic.w	r3, r3, #32
 8001802:	6193      	str	r3, [r2, #24]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40010400 	.word	0x40010400

08001814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001818:	f7ff fb54 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <LoopForever+0x6>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	; (8001854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <LoopForever+0xe>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	; (8001860 <LoopForever+0x16>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001842:	f000 f811 	bl	8001868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001846:	f7ff fb03 	bl	8000e50 <main>

0800184a <LoopForever>:

LoopForever:
    b LoopForever
 800184a:	e7fe      	b.n	800184a <LoopForever>
  ldr   r0, =_estack
 800184c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001858:	080018e0 	.word	0x080018e0
  ldr r2, =_sbss
 800185c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001860:	20000104 	.word	0x20000104

08001864 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <__libc_init_array>:
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	4d0d      	ldr	r5, [pc, #52]	; (80018a0 <__libc_init_array+0x38>)
 800186c:	4c0d      	ldr	r4, [pc, #52]	; (80018a4 <__libc_init_array+0x3c>)
 800186e:	1b64      	subs	r4, r4, r5
 8001870:	10a4      	asrs	r4, r4, #2
 8001872:	2600      	movs	r6, #0
 8001874:	42a6      	cmp	r6, r4
 8001876:	d109      	bne.n	800188c <__libc_init_array+0x24>
 8001878:	4d0b      	ldr	r5, [pc, #44]	; (80018a8 <__libc_init_array+0x40>)
 800187a:	4c0c      	ldr	r4, [pc, #48]	; (80018ac <__libc_init_array+0x44>)
 800187c:	f000 f818 	bl	80018b0 <_init>
 8001880:	1b64      	subs	r4, r4, r5
 8001882:	10a4      	asrs	r4, r4, #2
 8001884:	2600      	movs	r6, #0
 8001886:	42a6      	cmp	r6, r4
 8001888:	d105      	bne.n	8001896 <__libc_init_array+0x2e>
 800188a:	bd70      	pop	{r4, r5, r6, pc}
 800188c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001890:	4798      	blx	r3
 8001892:	3601      	adds	r6, #1
 8001894:	e7ee      	b.n	8001874 <__libc_init_array+0xc>
 8001896:	f855 3b04 	ldr.w	r3, [r5], #4
 800189a:	4798      	blx	r3
 800189c:	3601      	adds	r6, #1
 800189e:	e7f2      	b.n	8001886 <__libc_init_array+0x1e>
 80018a0:	080018d8 	.word	0x080018d8
 80018a4:	080018d8 	.word	0x080018d8
 80018a8:	080018d8 	.word	0x080018d8
 80018ac:	080018dc 	.word	0x080018dc

080018b0 <_init>:
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	bf00      	nop
 80018b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b6:	bc08      	pop	{r3}
 80018b8:	469e      	mov	lr, r3
 80018ba:	4770      	bx	lr

080018bc <_fini>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	bf00      	nop
 80018c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018c2:	bc08      	pop	{r3}
 80018c4:	469e      	mov	lr, r3
 80018c6:	4770      	bx	lr
