
main course2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000abc  08000abc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000acc  08000acc  00010acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000ad8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000ad8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000253d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c3  00000000  00000000  00022571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00022d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00022e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcc4  00000000  00000000  00022f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000261f  00000000  00000000  0003ec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba93  00000000  00000000  00041253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002f8  00000000  00000000  000dcd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000aa4 	.word	0x08000aa4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08000aa4 	.word	0x08000aa4

08000208 <init_ADC>:
#include "stm32f7xx.h"
#include "adc.h"

void init_ADC(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	//
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800020c:	4b61      	ldr	r3, [pc, #388]	; (8000394 <init_ADC+0x18c>)
 800020e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000210:	4a60      	ldr	r2, [pc, #384]	; (8000394 <init_ADC+0x18c>)
 8000212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000216:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <init_ADC+0x18c>)
 800021a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <init_ADC+0x18c>)
 800021e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000222:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8000224:	4b5b      	ldr	r3, [pc, #364]	; (8000394 <init_ADC+0x18c>)
 8000226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000228:	4a5a      	ldr	r2, [pc, #360]	; (8000394 <init_ADC+0x18c>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022e:	6453      	str	r3, [r2, #68]	; 0x44

	//Вкл АЦП 1 2 3
	ADC1->CR2 |= ADC_CR2_ADON;
 8000230:	4b59      	ldr	r3, [pc, #356]	; (8000398 <init_ADC+0x190>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4a58      	ldr	r2, [pc, #352]	; (8000398 <init_ADC+0x190>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;
 800023c:	4b57      	ldr	r3, [pc, #348]	; (800039c <init_ADC+0x194>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a56      	ldr	r2, [pc, #344]	; (800039c <init_ADC+0x194>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_ADON;
 8000248:	4b55      	ldr	r3, [pc, #340]	; (80003a0 <init_ADC+0x198>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a54      	ldr	r2, [pc, #336]	; (80003a0 <init_ADC+0x198>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6093      	str	r3, [r2, #8]

	// Выбираем 18 канал ADC1(датчик температуры)
	ADC1->SQR3|= 3; // Cигнал инжекции
 8000254:	4b50      	ldr	r3, [pc, #320]	; (8000398 <init_ADC+0x190>)
 8000256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000258:	4a4f      	ldr	r2, [pc, #316]	; (8000398 <init_ADC+0x190>)
 800025a:	f043 0303 	orr.w	r3, r3, #3
 800025e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3|= 0; //Выходное напряжение
 8000260:	4b4e      	ldr	r3, [pc, #312]	; (800039c <init_ADC+0x194>)
 8000262:	4a4e      	ldr	r2, [pc, #312]	; (800039c <init_ADC+0x194>)
 8000264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000266:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3|= 14; //Ток реактора
 8000268:	4b4d      	ldr	r3, [pc, #308]	; (80003a0 <init_ADC+0x198>)
 800026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026c:	4a4c      	ldr	r2, [pc, #304]	; (80003a0 <init_ADC+0x198>)
 800026e:	f043 030e 	orr.w	r3, r3, #14
 8000272:	6353      	str	r3, [r2, #52]	; 0x34

	//Выбираем каналы
	ADC1->SQR3|= 18<<5; //Температура
 8000274:	4b48      	ldr	r3, [pc, #288]	; (8000398 <init_ADC+0x190>)
 8000276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000278:	4a47      	ldr	r2, [pc, #284]	; (8000398 <init_ADC+0x190>)
 800027a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
 800027e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3|= 13<<5;//Выходное напряжение
 8000280:	4b46      	ldr	r3, [pc, #280]	; (800039c <init_ADC+0x194>)
 8000282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000284:	4a45      	ldr	r2, [pc, #276]	; (800039c <init_ADC+0x194>)
 8000286:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 800028a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3|= 12<<5;//Выходной ток
 800028c:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <init_ADC+0x198>)
 800028e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000290:	4a43      	ldr	r2, [pc, #268]	; (80003a0 <init_ADC+0x198>)
 8000292:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000296:	6353      	str	r3, [r2, #52]	; 0x34
	//Выбираем
	ADC1->SQR1|= 1<<20;
 8000298:	4b3f      	ldr	r3, [pc, #252]	; (8000398 <init_ADC+0x190>)
 800029a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800029c:	4a3e      	ldr	r2, [pc, #248]	; (8000398 <init_ADC+0x190>)
 800029e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC2->SQR1|= 1<<20;
 80002a4:	4b3d      	ldr	r3, [pc, #244]	; (800039c <init_ADC+0x194>)
 80002a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002a8:	4a3c      	ldr	r2, [pc, #240]	; (800039c <init_ADC+0x194>)
 80002aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR1|= 1<<20;
 80002b0:	4b3b      	ldr	r3, [pc, #236]	; (80003a0 <init_ADC+0x198>)
 80002b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002b4:	4a3a      	ldr	r2, [pc, #232]	; (80003a0 <init_ADC+0x198>)
 80002b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ba:	62d3      	str	r3, [r2, #44]	; 0x2c

	//Включение режима сканирования
	ADC1->CR1 |= ADC_CR1_SCAN;
 80002bc:	4b36      	ldr	r3, [pc, #216]	; (8000398 <init_ADC+0x190>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a35      	ldr	r2, [pc, #212]	; (8000398 <init_ADC+0x190>)
 80002c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c6:	6053      	str	r3, [r2, #4]
	ADC2->CR1 |= ADC_CR1_SCAN;
 80002c8:	4b34      	ldr	r3, [pc, #208]	; (800039c <init_ADC+0x194>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a33      	ldr	r2, [pc, #204]	; (800039c <init_ADC+0x194>)
 80002ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d2:	6053      	str	r3, [r2, #4]
	ADC3->CR1 |= ADC_CR1_SCAN;
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <init_ADC+0x198>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <init_ADC+0x198>)
 80002da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002de:	6053      	str	r3, [r2, #4]

	// ВКл режим преобразования непрерывный
	ADC1->CR2 |= ADC_CR2_CONT;
 80002e0:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <init_ADC+0x190>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a2c      	ldr	r2, [pc, #176]	; (8000398 <init_ADC+0x190>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6093      	str	r3, [r2, #8]


	//Устанавливаем циклов 480
	ADC1->SMPR1 |= ADC_SMPR1_SMP18_0;
 80002ec:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <init_ADC+0x190>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a29      	ldr	r2, [pc, #164]	; (8000398 <init_ADC+0x190>)
 80002f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f6:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR1 |= ADC_SMPR2_SMP3_0;
 80002f8:	4b27      	ldr	r3, [pc, #156]	; (8000398 <init_ADC+0x190>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a26      	ldr	r2, [pc, #152]	; (8000398 <init_ADC+0x190>)
 80002fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000302:	60d3      	str	r3, [r2, #12]

	ADC2->SMPR1 |= ADC_SMPR2_SMP0_0;
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <init_ADC+0x194>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <init_ADC+0x194>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	60d3      	str	r3, [r2, #12]
	ADC2->SMPR1 |= ADC_SMPR1_SMP13_0;
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <init_ADC+0x194>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a21      	ldr	r2, [pc, #132]	; (800039c <init_ADC+0x194>)
 8000316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800031a:	60d3      	str	r3, [r2, #12]

	ADC3->SMPR1 |= ADC_SMPR1_SMP14_0;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <init_ADC+0x198>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a1f      	ldr	r2, [pc, #124]	; (80003a0 <init_ADC+0x198>)
 8000322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000326:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR1 |= ADC_SMPR1_SMP12_0;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <init_ADC+0x190>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init_ADC+0x190>)
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	60d3      	str	r3, [r2, #12]


	// Вкл запуск ацп от сигнала Tim8 TRG0
	ADC1->CR2 |= ADC_CR2_EXTSEL_0|ADC_CR2_EXTSEL_1|ADC_CR2_EXTSEL_2;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <init_ADC+0x190>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a17      	ldr	r2, [pc, #92]	; (8000398 <init_ADC+0x190>)
 800033a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800033e:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= ADC_CCR_TSVREFE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <init_ADC+0x190>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <init_ADC+0x190>)
 8000346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800034a:	6093      	str	r3, [r2, #8]

	// Датчика температуры включение
	ADC->CCR |= ADC_CR2_EXTEN_0;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <init_ADC+0x19c>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <init_ADC+0x19c>)
 8000352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000356:	6053      	str	r3, [r2, #4]

	//Режим работы с ДМА 1
	ADC->CCR |= ADC_CCR_DMA_0;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <init_ADC+0x19c>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <init_ADC+0x19c>)
 800035e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000362:	6053      	str	r3, [r2, #4]
	//Вкл запуск запрооса дма по окончанию преобразования
	ADC->CCR |= ADC_CCR_DDS;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <init_ADC+0x19c>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <init_ADC+0x19c>)
 800036a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036e:	6053      	str	r3, [r2, #4]

	//Прерывание при окончании преобразования
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <init_ADC+0x190>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a08      	ldr	r2, [pc, #32]	; (8000398 <init_ADC+0x190>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6053      	str	r3, [r2, #4]
		ADC1->SQR3|= 18<<(5*(num-1)); //передвигать на пять битов и выбрать нужный регистр SQR
	if else (num<=12)
		ADC1->SQR2|= 18<<(5*(num-1));
	*/
	//
	ADC->CCR |= ADC_CCR_MULTI_1|ADC_CCR_MULTI_2|ADC_CCR_MULTI_3;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <init_ADC+0x19c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <init_ADC+0x19c>)
 8000382:	f043 030e 	orr.w	r3, r3, #14
 8000386:	6053      	str	r3, [r2, #4]





}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40023800 	.word	0x40023800
 8000398:	40012000 	.word	0x40012000
 800039c:	40012100 	.word	0x40012100
 80003a0:	40012200 	.word	0x40012200
 80003a4:	40012300 	.word	0x40012300

080003a8 <init_GPIO>:
//	gpio->MODER |= 2 << (2*pin);
//	gpio ->OSPEEDR |= 3 << (2*pin);
//}

void init_GPIO(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <init_GPIO+0x3c>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <init_GPIO+0x3c>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <init_GPIO+0x3c>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <init_GPIO+0x3c>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30

	init_GPIO_Output(GPIOD, 1);
 80003c4:	2101      	movs	r1, #1
 80003c6:	4808      	ldr	r0, [pc, #32]	; (80003e8 <init_GPIO+0x40>)
 80003c8:	f000 f812 	bl	80003f0 <init_GPIO_Output>
	init_GPIO_AFunction(GPIOC,6,3);
 80003cc:	2203      	movs	r2, #3
 80003ce:	2106      	movs	r1, #6
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <init_GPIO+0x44>)
 80003d2:	f000 f822 	bl	800041a <init_GPIO_AFunction>
	//init_GPIO_Output(GPIOD, 1);
	init_GPIO_AFunction(GPIOC,7,3);
 80003d6:	2203      	movs	r2, #3
 80003d8:	2107      	movs	r1, #7
 80003da:	4804      	ldr	r0, [pc, #16]	; (80003ec <init_GPIO+0x44>)
 80003dc:	f000 f81d 	bl	800041a <init_GPIO_AFunction>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	40020800 	.word	0x40020800

080003f0 <init_GPIO_Output>:



void init_GPIO_Output(GPIO_TypeDef *gpio, unsigned int pin)//инициализации установки порта
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	gpio->MODER |= 1<<(2*pin);//выставляем порт в General purpose output mode, 2*(pin=1) или сдвиг на 1 << (1 << 1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	0052      	lsls	r2, r2, #1
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	431a      	orrs	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	601a      	str	r2, [r3, #0]

}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <init_GPIO_AFunction>:

void init_GPIO_AFunction(GPIO_TypeDef *gpio, unsigned int pin, unsigned int AF)//инициализации установки порта в альтернативную функцию page 148 max speed table 58
{
 800041a:	b480      	push	{r7}
 800041c:	b085      	sub	sp, #20
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
	if (pin < 8)
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	2b07      	cmp	r3, #7
 800042a:	d80a      	bhi.n	8000442 <init_GPIO_AFunction+0x28>
		gpio->AFR[0]|= AF<<(4*pin);//в таблице номер порта AF6  в данном случае тройку в шестой порт
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	6a1a      	ldr	r2, [r3, #32]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	6879      	ldr	r1, [r7, #4]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	431a      	orrs	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	621a      	str	r2, [r3, #32]
 8000440:	e00a      	b.n	8000458 <init_GPIO_AFunction+0x3e>
	else gpio->AFR[1]|= AF<<(4*(pin - 8));//c,hjc lj gthdjuj gbyf
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	3b08      	subs	r3, #8
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	6879      	ldr	r1, [r7, #4]
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	431a      	orrs	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	625a      	str	r2, [r3, #36]	; 0x24

	gpio->MODER |= 2 << (2*pin);//выставляем порт в 10: Alternate function mode 2*(pin=1) или сдвиг на 1 << (1 << 1)
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	2102      	movs	r1, #2
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	431a      	orrs	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	601a      	str	r2, [r3, #0]
	gpio->OSPEEDR |= 3 << (2*pin);// page 148 max speed table 58
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	68ba      	ldr	r2, [r7, #8]
 8000472:	0052      	lsls	r2, r2, #1
 8000474:	2103      	movs	r1, #3
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	431a      	orrs	r2, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	609a      	str	r2, [r3, #8]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f003 0307 	and.w	r3, r3, #7
 800049a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <__NVIC_SetPriorityGrouping+0x40>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <__NVIC_SetPriorityGrouping+0x44>)
 80004b6:	4313      	orrs	r3, r2
 80004b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ba:	4a04      	ldr	r2, [pc, #16]	; (80004cc <__NVIC_SetPriorityGrouping+0x40>)
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	60d3      	str	r3, [r2, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	e000ed00 	.word	0xe000ed00
 80004d0:	05fa0000 	.word	0x05fa0000

080004d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <__NVIC_GetPriorityGrouping+0x18>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	f003 0307 	and.w	r3, r3, #7
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	db0b      	blt.n	800051a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	f003 021f 	and.w	r2, r3, #31
 8000508:	4907      	ldr	r1, [pc, #28]	; (8000528 <__NVIC_EnableIRQ+0x38>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	095b      	lsrs	r3, r3, #5
 8000510:	2001      	movs	r0, #1
 8000512:	fa00 f202 	lsl.w	r2, r0, r2
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e100 	.word	0xe000e100

0800052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db0a      	blt.n	8000556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	490c      	ldr	r1, [pc, #48]	; (8000578 <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000554:	e00a      	b.n	800056c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	0112      	lsls	r2, r2, #4
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	440b      	add	r3, r1
 800056a:	761a      	strb	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	f1c3 0307 	rsb	r3, r3, #7
 800059a:	2b04      	cmp	r3, #4
 800059c:	bf28      	it	cs
 800059e:	2304      	movcs	r3, #4
 80005a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d902      	bls.n	80005b0 <NVIC_EncodePriority+0x30>
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3b03      	subs	r3, #3
 80005ae:	e000      	b.n	80005b2 <NVIC_EncodePriority+0x32>
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43da      	mvns	r2, r3
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	401a      	ands	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43d9      	mvns	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4313      	orrs	r3, r2
         );
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3724      	adds	r7, #36	; 0x24
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <init_INTERRUPT>:


volatile float TEMPERATURA;

void init_INTERRUPT(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
	//Выбор варианта группирования прерывания 3 ( 16 групп по 16 подприоритет)
	NVIC_SetPriorityGrouping(3);
 80005ea:	2003      	movs	r0, #3
 80005ec:	f7ff ff4e 	bl	800048c <__NVIC_SetPriorityGrouping>
	//Установка приоретета прерывания TIM8_UP_TIM13: группа 1, подприоритет 1.
	NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1,1));
 80005f0:	f7ff ff70 	bl	80004d4 <__NVIC_GetPriorityGrouping>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2201      	movs	r2, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffc0 	bl	8000580 <NVIC_EncodePriority>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	202c      	movs	r0, #44	; 0x2c
 8000606:	f7ff ff91 	bl	800052c <__NVIC_SetPriority>

	//Включаем прерываний TIM8_UP_TIM13 в NVIC
	NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800060a:	202c      	movs	r0, #44	; 0x2c
 800060c:	f7ff ff70 	bl	80004f0 <__NVIC_EnableIRQ>


	//Установка приоретета прерывания TIM8_UP_TIM13: группа 1, подприоритет 1.
	NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1,1));
 8000610:	f7ff ff60 	bl	80004d4 <__NVIC_GetPriorityGrouping>
 8000614:	4603      	mov	r3, r0
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffb0 	bl	8000580 <NVIC_EncodePriority>
 8000620:	4603      	mov	r3, r0
 8000622:	4619      	mov	r1, r3
 8000624:	2012      	movs	r0, #18
 8000626:	f7ff ff81 	bl	800052c <__NVIC_SetPriority>

	//Включаем прерываний TADC в NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 800062a:	2012      	movs	r0, #18
 800062c:	f7ff ff60 	bl	80004f0 <__NVIC_EnableIRQ>

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	// Сбрасываем флаг прерывания ТИМ8 по обновлению.
	TIM8-> SR &= ~TIM_SR_UIF;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 800063a:	691b      	ldr	r3, [r3, #16]
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	6113      	str	r3, [r2, #16]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000644:	f3bf 8f6f 	isb	sy
}
 8000648:	bf00      	nop

	// Ожидание выполнения  всех инструкций в конвеере архитектуры АРМ(pipline)
	__ISB();

	GPIOD->ODR ^= 1<<6;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <TIM8_UP_TIM13_IRQHandler+0x30>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <TIM8_UP_TIM13_IRQHandler+0x30>)
 8000650:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000654:	6153      	str	r3, [r2, #20]

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40010400 	.word	0x40010400
 8000664:	40020c00 	.word	0x40020c00

08000668 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
	//Сброс флага прерывания по окончанию преобразования
	ADC1->SR &= ~ADC_SR_EOC;
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <ADC_IRQHandler+0x68>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <ADC_IRQHandler+0x68>)
 8000674:	f023 0302 	bic.w	r3, r3, #2
 8000678:	6013      	str	r3, [r2, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800067a:	f3bf 8f6f 	isb	sy
}
 800067e:	bf00      	nop

	// Ожидание выполнения  всех инструкций в конвеере архитектуры АРМ(pipline)
	__ISB();

	const float av_slope = 2.5f*0.001f;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <ADC_IRQHandler+0x6c>)
 8000682:	60fb      	str	r3, [r7, #12]
	const float v25 = 0.76;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <ADC_IRQHandler+0x70>)
 8000686:	60bb      	str	r3, [r7, #8]

	float v_sense = ADC1->DR *(3.3f/4095.f);
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <ADC_IRQHandler+0x68>)
 800068a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000694:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80006dc <ADC_IRQHandler+0x74>
 8000698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800069c:	edc7 7a01 	vstr	s15, [r7, #4]

	TEMPERATURA = (v_sense - v25)/av_slope * 25.f;
 80006a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80006a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80006a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80006b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <ADC_IRQHandler+0x78>)
 80006be:	edc3 7a00 	vstr	s15, [r3]

}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	3b23d70b 	.word	0x3b23d70b
 80006d8:	3f428f5c 	.word	0x3f428f5c
 80006dc:	3a534067 	.word	0x3a534067
 80006e0:	20000020 	.word	0x20000020

080006e4 <main>:
#include "interrupt.h"
#include "adc.h"


int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	init_RCC();
 80006ea:	f000 f81d 	bl	8000728 <init_RCC>
	init_GPIO();
 80006ee:	f7ff fe5b 	bl	80003a8 <init_GPIO>
	init_TIMER8();
 80006f2:	f000 f93b 	bl	800096c <init_TIMER8>
	init_INTERRUPT();
 80006f6:	f7ff ff76 	bl	80005e6 <init_INTERRUPT>
	init_ADC();
 80006fa:	f7ff fd85 	bl	8000208 <init_ADC>


    /* Loop forever */
    for(;;)
    {
        for(int i = 0; i < 100000; i++);
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e002      	b.n	800070a <main+0x26>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3301      	adds	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <main+0x3c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	ddf8      	ble.n	8000704 <main+0x20>
        GPIOD->ODR ^= 1 << 1;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <main+0x40>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a03      	ldr	r2, [pc, #12]	; (8000724 <main+0x40>)
 8000718:	f083 0302 	eor.w	r3, r3, #2
 800071c:	6153      	str	r3, [r2, #20]
        for(int i = 0; i < 100000; i++);
 800071e:	e7ee      	b.n	80006fe <main+0x1a>
 8000720:	0001869f 	.word	0x0001869f
 8000724:	40020c00 	.word	0x40020c00

08000728 <init_RCC>:

#include "stm32f7xx.h"
#include "rcc.h"

void init_RCC(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR = 0xFFFFFFFF;
 800072e:	4b43      	ldr	r3, [pc, #268]	; (800083c <init_RCC+0x114>)
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	611a      	str	r2, [r3, #16]
    RCC->AHB1RSTR = 0x00000000;
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <init_RCC+0x114>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]

    RCC->AHB2RSTR = 0xFFFFFFFF;
 800073c:	4b3f      	ldr	r3, [pc, #252]	; (800083c <init_RCC+0x114>)
 800073e:	f04f 32ff 	mov.w	r2, #4294967295
 8000742:	615a      	str	r2, [r3, #20]
    RCC->AHB2RSTR = 0x00000000;
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <init_RCC+0x114>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]

    RCC->APB1RSTR = 0xFFFFFFFF;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <init_RCC+0x114>)
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	621a      	str	r2, [r3, #32]
    RCC->APB1RSTR = 0x00000000;
 8000752:	4b3a      	ldr	r3, [pc, #232]	; (800083c <init_RCC+0x114>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]

    RCC->APB2RSTR = 0xFFFFFFFF;
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <init_RCC+0x114>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC->APB2RSTR = 0x00000000;
 8000760:	4b36      	ldr	r3, [pc, #216]	; (800083c <init_RCC+0x114>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24

    // Обновление переменной с частотой тактирования

    SystemCoreClockUpdate();
 8000766:	f000 f881 	bl	800086c <SystemCoreClockUpdate>

   // return;

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <init_RCC+0x114>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a33      	ldr	r2, [pc, #204]	; (800083c <init_RCC+0x114>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
    // включение внешенего тактирования
    RCC->CR |= RCC_CR_HSEBYP;
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <init_RCC+0x114>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <init_RCC+0x114>)
 800077c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000780:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_HSEON;//переключение тактирования на внутреннее
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <init_RCC+0x114>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <init_RCC+0x114>)
 8000788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078c:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSERDY));
 800078e:	bf00      	nop
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <init_RCC+0x114>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <init_RCC+0x68>

    //Выключение PLL  пред делитель
    RCC->CR &= ~RCC_CR_PLLON;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <init_RCC+0x114>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a26      	ldr	r2, [pc, #152]	; (800083c <init_RCC+0x114>)
 80007a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007a6:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 80007a8:	bf00      	nop
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <init_RCC+0x114>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f9      	bne.n	80007aa <init_RCC+0x82>

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;//настройки делителей на выходе
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <init_RCC+0x114>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <init_RCC+0x114>)
 80007bc:	f443 4314 	orr.w	r3, r3, #37888	; 0x9400
 80007c0:	6093      	str	r3, [r2, #8]

    //Настройка предделителя PLL
    uint32_t pllcfgr = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
    //пред делитель ноль это два
    pllcfgr |= RCC_PLLCFGR_PLLSRC_HSE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007cc:	607b      	str	r3, [r7, #4]
    pllcfgr |= 25 << RCC_PLLCFGR_PLLM_Pos;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f043 0319 	orr.w	r3, r3, #25
 80007d4:	607b      	str	r3, [r7, #4]
    pllcfgr |= 432 << RCC_PLLCFGR_PLLN_Pos;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 80007dc:	607b      	str	r3, [r7, #4]
    pllcfgr |= 0 << RCC_PLLCFGR_PLLP_Pos;

    RCC->PLLCFGR = pllcfgr;
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <init_RCC+0x114>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6053      	str	r3, [r2, #4]

    //Настройка latency  на 1  для 32 МГц
    FLASH->ACR |= (7 << FLASH_ACR_LATENCY_Pos);
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <init_RCC+0x118>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a15      	ldr	r2, [pc, #84]	; (8000840 <init_RCC+0x118>)
 80007ea:	f043 0307 	orr.w	r3, r3, #7
 80007ee:	6013      	str	r3, [r2, #0]

    RCC->CR |= RCC_CR_PLLON;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <init_RCC+0x114>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a11      	ldr	r2, [pc, #68]	; (800083c <init_RCC+0x114>)
 80007f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007fa:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 80007fc:	bf00      	nop
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <init_RCC+0x114>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f9      	beq.n	80007fe <init_RCC+0xd6>

    //включение овердрайв нужен для максимальной частоте, НЕОБХОДИМО СДЕЛАТЬ РАНЬШЕ ЧЕМ ПЕРЕХОД PLL
    PWR->CR1 |= (uint32_t)PWR_CR1_ODEN;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <init_RCC+0x11c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <init_RCC+0x11c>)
 8000810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000814:	6013      	str	r3, [r2, #0]
    PWR->CR1 |= (uint32_t)PWR_CR1_ODSWEN;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <init_RCC+0x11c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <init_RCC+0x11c>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6013      	str	r3, [r2, #0]

    //Выбор PLL  как основного источника тактирования
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <init_RCC+0x114>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <init_RCC+0x114>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6093      	str	r3, [r2, #8]



    SystemCoreClockUpdate();
 800082e:	f000 f81d 	bl	800086c <SystemCoreClockUpdate>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40023c00 	.word	0x40023c00
 8000844:	40007000 	.word	0x40007000

08000848 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	2302      	movs	r3, #2
 8000884:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <SystemCoreClockUpdate+0xec>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d011      	beq.n	80008ba <SystemCoreClockUpdate+0x4e>
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2b08      	cmp	r3, #8
 800089a:	d844      	bhi.n	8000926 <SystemCoreClockUpdate+0xba>
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <SystemCoreClockUpdate+0x3e>
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d004      	beq.n	80008b2 <SystemCoreClockUpdate+0x46>
 80008a8:	e03d      	b.n	8000926 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <SystemCoreClockUpdate+0xf0>)
 80008ac:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <SystemCoreClockUpdate+0xf4>)
 80008ae:	601a      	str	r2, [r3, #0]
      break;
 80008b0:	e03d      	b.n	800092e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <SystemCoreClockUpdate+0xf0>)
 80008b4:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <SystemCoreClockUpdate+0xf8>)
 80008b6:	601a      	str	r2, [r3, #0]
      break;
 80008b8:	e039      	b.n	800092e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <SystemCoreClockUpdate+0xec>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	0d9b      	lsrs	r3, r3, #22
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <SystemCoreClockUpdate+0xec>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008ce:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00c      	beq.n	80008f0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <SystemCoreClockUpdate+0xf8>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <SystemCoreClockUpdate+0xec>)
 80008e0:	6852      	ldr	r2, [r2, #4]
 80008e2:	0992      	lsrs	r2, r2, #6
 80008e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e00b      	b.n	8000908 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <SystemCoreClockUpdate+0xf4>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <SystemCoreClockUpdate+0xec>)
 80008fa:	6852      	ldr	r2, [r2, #4]
 80008fc:	0992      	lsrs	r2, r2, #6
 80008fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000902:	fb02 f303 	mul.w	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <SystemCoreClockUpdate+0xec>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	3301      	adds	r3, #1
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SystemCoreClockUpdate+0xf0>)
 8000922:	6013      	str	r3, [r2, #0]
      break;
 8000924:	e003      	b.n	800092e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SystemCoreClockUpdate+0xf0>)
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <SystemCoreClockUpdate+0xf4>)
 800092a:	601a      	str	r2, [r3, #0]
      break;
 800092c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <SystemCoreClockUpdate+0xec>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <SystemCoreClockUpdate+0xfc>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <SystemCoreClockUpdate+0xf0>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	fa22 f303 	lsr.w	r3, r2, r3
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <SystemCoreClockUpdate+0xf0>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	371c      	adds	r7, #28
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40023800 	.word	0x40023800
 800095c:	20000000 	.word	0x20000000
 8000960:	00f42400 	.word	0x00f42400
 8000964:	017d7840 	.word	0x017d7840
 8000968:	08000abc 	.word	0x08000abc

0800096c <init_TIMER8>:
#include "stm32f7xx.h"
#include "timer.h"

void init_TIMER8(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	//	Вкл. тактирования
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <init_TIMER8+0x94>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <init_TIMER8+0x94>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	6453      	str	r3, [r2, #68]	; 0x44

	//	НастраиваемЖ
	//	Предделитель:1
	//	Максимальный счет: 1079 (100кГц)

	TIM8->PSC=0;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <init_TIMER8+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->ARR = 216000000/100000/2;//	init_GPIO_Output(GPIOD, 1);
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <init_TIMER8+0x98>)
 8000984:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c

	//	Регистр савнения: 540(50% заполнение)
	TIM8->CCR1 = TIM8->ARR/2; //	регистр сравнения CCR1  число с которым сравниваетс счетчик
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <init_TIMER8+0x98>)
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <init_TIMER8+0x98>)
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	6353      	str	r3, [r2, #52]	; 0x34


	//	Симметричный счет (режим 2)
	TIM8->CR1|= TIM_CR1_CMS_1;			// режим симетричного счета до ARR
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <init_TIMER8+0x98>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <init_TIMER8+0x98>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099e:	6013      	str	r3, [r2, #0]

	TIM8->CCER|= TIM_CCER_CC1E;// включить канал сравнения, полярность если надо
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <init_TIMER8+0x98>)
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <init_TIMER8+0x98>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6213      	str	r3, [r2, #32]


	//	Режим ЩИМ 1
	TIM8->CCMR1|= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; //  ассиметричный
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <init_TIMER8+0x98>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <init_TIMER8+0x98>)
 80009b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80009b6:	6193      	str	r3, [r2, #24]

	//	Режим ЩИМ 2


	//Включить буферизацию
	TIM8->CCMR1|= TIM_CCMR1_OC1PE;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <init_TIMER8+0x98>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <init_TIMER8+0x98>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]


	//	Вкл физический канал выхода.
	TIM8->BDTR|= TIM_BDTR_MOE;// для всех каналов 8 таймера
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <init_TIMER8+0x98>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <init_TIMER8+0x98>)
 80009ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ce:	6453      	str	r3, [r2, #68]	; 0x44

	//Влючение прерывания по обновлению
	TIM8->DIER|=TIM_DIER_UIE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <init_TIMER8+0x98>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <init_TIMER8+0x98>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	60d3      	str	r3, [r2, #12]

	TIM8->CR2|= TIM_CR2_MMS_1;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <init_TIMER8+0x98>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <init_TIMER8+0x98>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6053      	str	r3, [r2, #4]



	//	Вкл. счет таймера.
	TIM8->CR1|= TIM_CR1_CEN;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <init_TIMER8+0x98>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <init_TIMER8+0x98>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]

}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40010400 	.word	0x40010400

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f7ff ff1c 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f000 f811 	bl	8000a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fe53 	bl	80006e4 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a4c:	08000ad4 	.word	0x08000ad4
  ldr r2, =_sbss
 8000a50:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a54:	20000024 	.word	0x20000024

08000a58 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <BusFault_Handler>
	...

08000a5c <__libc_init_array>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	4d0d      	ldr	r5, [pc, #52]	; (8000a94 <__libc_init_array+0x38>)
 8000a60:	4c0d      	ldr	r4, [pc, #52]	; (8000a98 <__libc_init_array+0x3c>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	2600      	movs	r6, #0
 8000a68:	42a6      	cmp	r6, r4
 8000a6a:	d109      	bne.n	8000a80 <__libc_init_array+0x24>
 8000a6c:	4d0b      	ldr	r5, [pc, #44]	; (8000a9c <__libc_init_array+0x40>)
 8000a6e:	4c0c      	ldr	r4, [pc, #48]	; (8000aa0 <__libc_init_array+0x44>)
 8000a70:	f000 f818 	bl	8000aa4 <_init>
 8000a74:	1b64      	subs	r4, r4, r5
 8000a76:	10a4      	asrs	r4, r4, #2
 8000a78:	2600      	movs	r6, #0
 8000a7a:	42a6      	cmp	r6, r4
 8000a7c:	d105      	bne.n	8000a8a <__libc_init_array+0x2e>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a84:	4798      	blx	r3
 8000a86:	3601      	adds	r6, #1
 8000a88:	e7ee      	b.n	8000a68 <__libc_init_array+0xc>
 8000a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8e:	4798      	blx	r3
 8000a90:	3601      	adds	r6, #1
 8000a92:	e7f2      	b.n	8000a7a <__libc_init_array+0x1e>
 8000a94:	08000acc 	.word	0x08000acc
 8000a98:	08000acc 	.word	0x08000acc
 8000a9c:	08000acc 	.word	0x08000acc
 8000aa0:	08000ad0 	.word	0x08000ad0

08000aa4 <_init>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	bf00      	nop
 8000aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aaa:	bc08      	pop	{r3}
 8000aac:	469e      	mov	lr, r3
 8000aae:	4770      	bx	lr

08000ab0 <_fini>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	bf00      	nop
 8000ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab6:	bc08      	pop	{r3}
 8000ab8:	469e      	mov	lr, r3
 8000aba:	4770      	bx	lr
